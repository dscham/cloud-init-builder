# This workflow will build and release a Go project manually.
# It uses a custom script to cross-compile for multiple platforms.

name: Release

# This allows the workflow to be triggered manually from the Actions tab in GitHub.
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The release version tag (e.g., v1.0.0)'
        required: true
      binary_name:
        description: 'Name for the output binary (defaults to the repository name)'
        required: false
      package_path:
        description: 'Path to the Go package to build'
        required: true
        default: './src/main.go'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    # 1. Check out the repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Set up the Go environment
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    # 3. Make the build script executable
    - name: Make build script executable
      run: chmod +x build-release.bash

    # 4. Run the build script to create binaries
    # It uses the input 'binary_name', but defaults to the repo name if not provided.
    - name: Build cross-platform binaries
      run: ./build-release.bash -b ${{ github.event.inputs.binary_name || github.event.repository.name }} -p ${{ github.event.inputs.package_path }}

    # 5. Create the GitHub Release and upload the binaries
    # This step uses the 'version' input to tag the release.
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        # The tag for the release, taken from the manual input.
        tag_name: ${{ github.event.inputs.version }}
        # The title of the release.
        name: Release ${{ github.event.inputs.version }}
        # The files to upload as release assets. 'release/*' uploads everything
        # from the 'release' directory created by your build script.
        files: release/*
      env:
        # The GITHUB_TOKEN is required to create a release.
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
